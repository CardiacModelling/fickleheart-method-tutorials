[[model]]
name: fink-2008
author: Chon Lok Lei
desc: """
    References:
    [1] Contributions of HERG potassium+ current to repolarization of the human
    ventricular action potential
    Martin Fink, Denis Noble, Laszlo Virag, Andras Varro, and Wayne R. Giles
    2008 Progress in Biophysics and Molecular Biology 96, (1-3), 357-376
    """
# Initial values
membrane.V    = -86.45
ikr.Cr1       = 0.9786
ikr.Cr2       = 0.0031
ikr.Cr3       = 0.0029
ikr.Or4       = 0.014
ikr.Ir5       = 0.0014
ikr.BCr1      = 0
ikr.BCr2      = 0
ikr.BCr3      = 0
ikr.BOr4      = 0
ikr.BIr5      = 0
iks.Xs        = 0.00303
ito.s         = 1
ito.r         = 2.11e-08
ina.m         = 0.00132
ina.h         = 0.7768
ina.j         = 0.7766
ical.d        = 5.06e-06
ical.f        = 0.9999
ical.f2       = 0.9995
ical.fCass    = 1
calcium.Ca_i  = 0.0001092
calcium.Ca_SR = 2.7656
calcium.Ca_ss = 0.0001893
irel.R_prime  = 0.9864
sodium.Na_i   = 7.940167
potassium.K_i = 141.0167

[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
dot(V) = -(i_ion + stimulus.i_stim)
    in [mV]
    label membrane_potential
#[membrane]
#V = engine.pace
#    desc: membane potential
#    in [mV]
i_ion = ik1.i_K1 + ito.i_to + ikr.i_Kr + iks.i_Ks + ical.i_CaL + inak.i_NaK + ina.i_Na + inab.i_b_Na + inaca.i_NaCa + icab.i_b_Ca + ipk.i_p_K + ipca.i_p_Ca
    in [A/F]
    label cellular_current

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * stim_amplitude
    in [A/F]
stim_amplitude = -12 [A/F]

#
# Cell properties
#
[cell]
Cm = 0.115 [nF]
Vol_c = 0.016404 [nL]

#
# Calcium concentrations
#
[calcium]
dot(Ca_SR) = buffer.Ca_sr_bufsr * (ileak.i_up - (irel.i_rel + ileak.i_leak))
    in [mM]
dot(Ca_i) = buffer.Ca_i_bufc * ((ileak.i_leak - ileak.i_up) * V_sr / cell.Vol_c + ileak.i_xfer - (icab.i_b_Ca + ipca.i_p_Ca - 2 * inaca.i_NaCa) * cell.Cm / (2 * cell.Vol_c * phys.F))
    in [mM]
dot(Ca_ss) = buffer.Ca_ss_bufss * (-ical.i_CaL * cell.Cm / (2 * V_ss * phys.F) + irel.i_rel * V_sr / V_ss - ileak.i_xfer * cell.Vol_c / V_ss)
    in [mM]
V_sr = 0.001094 [nL]
V_ss = 5.468e-05 [nL]

#
# Calcium buffering
#
[buffer]
Buf_c = 0.2 [mM]
Buf_sr = 10 [mM]
Buf_ss = 0.4 [mM]
Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (calcium.Ca_i + K_buf_c) ^ 2)
Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (calcium.Ca_SR + K_buf_sr) ^ 2)
Ca_ss_bufss = 1 / (1 + Buf_ss * K_buf_ss / (calcium.Ca_ss + K_buf_ss) ^ 2)
K_buf_c = 0.001 [mM]
K_buf_sr = 0.3 [mM]
K_buf_ss = 0.00025 [mM]

#
# External ion concentrations
#
[ion]
Ca_o = 2 [mM]
K_o = 5.4 [mM]
Na_o = 140 [mM]

#
# Physical constants
#
[phys]
F =  9.64853415e4 [C/mol]
R = 8314.472 [mJ/mol/K]
T = 310 [K]

#
# L-type calcium current
#
[ical]
use membrane.V
i_CaL = g_CaL * d * f * f2 * fCass * 4 * (V - 15) * phys.F ^ 2 / (phys.R * phys.T) * (0.25 * calcium.Ca_ss * exp(2 * (V - 15) * phys.F / (phys.R * phys.T)) - ion.Ca_o) / (exp(2 * (V - 15) * phys.F / (phys.R * phys.T)) - 1)
    in [A/F]
g_CaL = 2e-5 [L/F/ms]
dot(d) = (d_inf - d) / tau_d
    alpha_d = 1.4 / (1 + exp((-35 - V) / 13)) + 0.25
    beta_d = 1.4 / (1 + exp((V + 5) / 5))
    d_inf = 1 / (1 + exp((d_inf_shift - V) / 7.5))
    d_inf_shift = 5
    gamma_d = 1 / (1 + exp((50 - V) / 20))
    tau_d = 1 * alpha_d * beta_d + gamma_d
dot(f2) = (f2_inf - f2) / tau_f2
    f2_inf = 0.75 / (1 + exp((V + 35) / 7)) + 0.25
    tau_f2 = (562 * exp(-(V + 27) ^ 2 / 240) + 31 / (1 + exp((25 - V) / 10)) + 80 / (1 + exp((V + 30) / 10))) / 2
dot(fCass) = (fCass_inf - fCass) / tau_fCass
    fCass_inf = 0.4 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 0.6
    tau_fCass = 80 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 2
dot(f) = (f_inf - f) / tau_f
    f_inf = 1 / (1 + exp((V + 20) / 7))
    tau_f = (1102.5 * exp(-(V + 27) ^ 2 / 225) + 200 / (1 + exp((13 - V) / 10)) + 180 / (1 + exp((V + 30) / 10)) + 20) / 4

#
# Background calcium current
#
[icab]
use membrane.V
g_bca = 0.0004736 [1/ms]
i_b_Ca = g_bca * (V - rev.E_Ca)
    in [A/F]

#
# Time independent potassium current
#
[ik1]
use membrane.V
i_K1 = g_K1 * sqrt(ion.K_o / 5.4) * xK1_inf * (V - rev.E_K)
    in [A/F]
g_K1 = g_K1_0 * (phys.T / 35 - 55 / 7) in [1/ms]
g_K1_0 = 0.6821 [1/ms]
xK1_inf = phi * rec1 + (1 - phi) * rec2
    KbMg = 0.45 * exp(-(V - fac * rev.E_K) / 20)
    Kd1SPM = 0.0007 * exp(-(V - fac * rev.E_K + 8 * Mg_Buf) / 4.8)
    Kd2SPM = 0.04 * exp(-(V - fac * rev.E_K) / 9.1)
    KiMg = 2.8 * exp(-(V - fac * rev.E_K) / 180)
    Mg_Buf = 0.0356 [mM]
    SPM = 0.0014613 [mM]
    fac = 1.0648
    phi = 0.8838
    rec1 = temp * temp / (SPM / Kd1SPM + Mg_Buf / KiMg + temp * temp * temp)
    rec2 = 1 / (1 + SPM / Kd2SPM)
    temp = 1 + Mg_Buf / KbMg


#
# Rapidly activating potassium current
#
[ikr]
use membrane.V
g_Kr_0 = 0.024 [1/ms]
g_Kr = g_Kr_0 * (phys.T / 35 - 55 / 7) in [1/ms]
i_Kr = g_Kr * sqrt(ion.K_o / 5.4) * Or4 * (V - rev.E_K)
    in [A/F]
# Markov model
T_Base = 310 [K]
alpha_xr1 = 1 * phys.T / T_Base * exp(24.335 + T_Base / phys.T * (0.0112 * V - 25.914))
alpha_xr2 = 1 * phys.T / T_Base * exp(22.746 + T_Base / phys.T * (0 * V - 25.914))
alpha_xr3 = 1 * phys.T / T_Base * exp(22.098 + T_Base / phys.T * (0.0365 * V - 25.914))
alpha_xr4 = 1 * phys.T / T_Base * exp(30.016 + T_Base / phys.T * (0.0223 * V - 30.888)) * (5.4 / ion.K_o) ^ 0.4
beta_xr1 = 1 * phys.T / T_Base * exp(13.688 + T_Base / phys.T * (-0.0603 * V - 15.707))
beta_xr2 = 1 * phys.T / T_Base * exp(13.193 + T_Base / phys.T * (0 * V - 15.707))
beta_xr3 = 1 * phys.T / T_Base * exp(7.313 + T_Base / phys.T * (-0.0399 * V - 15.707))
beta_xr4 = 1 * phys.T / T_Base * exp(30.061 + T_Base / phys.T * (-0.0312 * V - 33.243))
dot(Cr1) = beta_xr1 * Cr2 - alpha_xr1 * Cr1
dot(Cr2) = alpha_xr1 * Cr1 + beta_xr2 * Cr3 - (alpha_xr2 + beta_xr1) * Cr2
dot(Cr3) = alpha_xr2 * Cr2 + beta_xr3 * Or4 - (alpha_xr3 + beta_xr2) * Cr3
dot(Ir5) = alpha_xr4 * Or4 - beta_xr4 * Ir5
dot(Or4) = alpha_xr3 * Cr3 + beta_xr4 * Ir5 - (alpha_xr4 + beta_xr3) * Or4 - OtoB + BtoO
# Sotalol block
BtoO = BOr4 * kDiss
    in [1/ms]
OtoB = Or4 * Sotalol_mM * kBinding
    in [1/ms]
Sotalol_mM = 0 [mM]
kBinding = 0.005 [1/mM/ms]
kDiss = 0.00125 [1/ms]
dot(BCr1) = beta_xr1 * BCr2 - alpha_xr1 * BCr1
dot(BCr2) = alpha_xr1 * BCr1 + beta_xr2 * BCr3 - (alpha_xr2 + beta_xr1) * BCr2
dot(BCr3) = alpha_xr2 * BCr2 + beta_xr3 * BOr4 - (alpha_xr3 + beta_xr2) * BCr3
dot(BIr5) = alpha_xr4 * BOr4 - beta_xr4 * BIr5
dot(BOr4) = alpha_xr3 * BCr3 + beta_xr4 * BIr5 - (alpha_xr4 + beta_xr3) * BOr4 + OtoB - BtoO

#
# Slowly activating potassium current
#
[iks]
use membrane.V
g_Ks = 0.0392 [1/ms]
i_Ks = g_Ks * Xs ^ 2 * (V - rev.E_Ks)
    in [A/F]
dot(Xs) = (xs_inf - Xs) / tau_xs
    alpha_xs = 1400 / sqrt(1 + exp((5 - V) / 6))
    beta_xs = 1 / (1 + exp((V - 35) / 15))
    tau_xs = 1 * alpha_xs * beta_xs + 80
    xs_inf = 1 / (1 + exp((-5 - V) / 14))

#
# Fast sodium current
#
[ina]
use membrane.V
g_Na = 11 [1/ms]
i_Na = g_Na * m ^ 3 * h * j * (V - rev.E_Na)
    in [A/F]
shift = 0 [mV]
dot(m) = (m_inf - m) / tau_m
    alpha_m = 1 / (1 + exp((-60 - V) / 5))
    beta_m = 0.1 / (1 + exp((V + 35) / 5)) + 0.1 / (1 + exp((V - 50) / 200))
    m_inf = 1 / (1 + exp((-56.86 - V) / 9.03)) ^ 2
    tau_m = 1 * alpha_m * beta_m
dot(h) = (h_inf - h) / tau_h
    alpha_h = if(V < -40 + shift, 0.057 * exp(-(V + 80 - shift) / 6.8), 0)
    beta_h = if(V < -40 + shift, 2.7 * exp(0.079 * (V - shift)) + 310000 * exp(0.3485 * (V - shift)), 0.77 / (0.13 * (1 + exp((V + 10.66 - shift) / -11.1))))
    h_inf = 1 / (1 + exp((V + 71.55 - shift) / 7.43)) ^ 2
    tau_h = 1 / (alpha_h + beta_h)
dot(j) = (j_inf - j) / tau_j
    alpha_j = if(V < -40 + shift, (-25428 * exp(0.2444 * (V - shift)) - 6.948e-06 * exp(-0.04391 * (V - shift))) * (V + 37.78) / 1 / (1 + exp(0.311 * (V + 79.23 - shift))), 0)
    beta_j = if(V < -40 + shift, 0.02424 * exp(-0.01052 * (V - shift)) / (1 + exp(-0.1378 * (V + 40.14 - shift))), 0.6 * exp(0.057 * (V - shift)) / (1 + exp(-0.1 * (V + 32 - shift))))
    j_inf = 1 / (1 + exp((V + 71.55 - shift) / 7.43)) ^ 2
    tau_j = 1 / (alpha_j + beta_j)

#
# Sodium-Calcium exchanger
#
[inaca]
use membrane.V
i_NaCa = K_NaCa * (exp(gamma * V * phys.F / (phys.R * phys.T)) * sodium.Na_i ^ 3 * ion.Ca_o - exp((gamma - 1) * V * phys.F / (phys.R * phys.T)) * ion.Na_o ^ 3 * calcium.Ca_i * alpha) / ((Km_Nai ^ 3 + ion.Na_o ^ 3) * (Km_Ca + ion.Ca_o) * (1 + K_sat * exp((gamma - 1) * V * phys.F / (phys.R * phys.T))))
    in [A/F]
K_NaCa = 200 [A/F]
K_sat = 0.1
Km_Ca = 1.38 [mM]
Km_Nai = 87.5 [mM]
alpha = 2.5
gamma = 0.35

#
# Sodium-potassium pump
#
[inak]
use membrane.V
i_NaK = P_NaK * ion.K_o / (ion.K_o + K_mk) * sodium.Na_i / (sodium.Na_i + K_mNa) / (1 + 0.1245 * exp(-0.1 * V * phys.F / (phys.R * phys.T)) + 0.0353 * exp(-V * phys.F / (phys.R * phys.T)))
    in [A/F]
K_mNa = 40 [mM]
K_mk = 1 [mM]
P_NaK = 1.297 [A/F]

#
# Background sodium current
#
[inab]
use membrane.V
g_bna = 0.00029 [1/ms]
i_b_Na = g_bna * (V - rev.E_Na)
    in [A/F]

#
# Calcium leak, uptake, transfer
#
[ileak]
i_leak = Vol_leak * (calcium.Ca_SR - calcium.Ca_i)
    in [mM/ms]
i_up = Vmax_up / (1 + K_up ^ 2 / calcium.Ca_i ^ 2)
    in [mM/ms]
i_xfer = Vol_xfer * (calcium.Ca_ss - calcium.Ca_i)
    in [mM/ms]
K_up = 0.00025 [mM]
Vmax_up = 0.006375 [mM/ms]
Vol_leak = 0.00036 [1/ms]
Vol_xfer = 0.0038 [1/ms]

#
# Sarcolemmal calcium pump
#
[ipca]
i_p_Ca = g_pCa * calcium.Ca_i / (calcium.Ca_i + K_pCa)
    in [A/F]
K_pCa = 0.0005 [mM]
g_pCa = 0.0619 [A/F]

#
# Plateau potassium current
#
[ipk]
use membrane.V
i_p_K = g_pK * (V - rev.E_K) / (1 + exp((25 - V) / 5.98))
    in [A/F]
g_pK = 0.00973 [1/ms]

#
# Calcium release current
#
[irel]
i_rel = Vol_rel * O * (calcium.Ca_SR - calcium.Ca_ss)
    in [mM/ms]
dot(R_prime) = -k2 * calcium.Ca_ss * R_prime + k4 * (1 - R_prime)
O = k1 * calcium.Ca_ss ^ 2 * R_prime / (k3 + k1 * calcium.Ca_ss ^ 2)
EC = 1.5 [mM]
Vol_rel = 0.306 [1/ms]
k1_prime = 0.15
k2_prime = 0.045 [1/mM/ms]
k1 = k1_prime / kcasr
k2 = k2_prime * kcasr
k3 = 0.06 [1/ms]
k4 = 0.005 [1/ms]
kcasr = max_sr - (max_sr - min_sr) / (1 + (EC / calcium.Ca_SR) ^ 2)
    max_sr = 2.5
    min_sr = 1

#
# Transient potassium current
#
[ito]
use membrane.V
i_to = g_to * r * s * (V - rev.E_K)
    in [A/F]
g_to = 0.2 [1/ms]
dot(r) = (r_inf - r) / tau_r
    r_inf = 1 / (1 + exp((20 - V) / 6))
    tau_r = 9.5 * exp(-(V + 40) ^ 2 / 1800) + 0.8
dot(s) = (s_inf - s) / tau_s
    s_inf = 1 / (1 + exp((V + 20) / 5))
    tau_s = 85 * exp(-(V + 45) ^ 2 / 320) + 5 / (1 + exp((V - 20) / 5)) + 3

#
# Potassium concentration
#
[potassium]
dot(K_i) = -(ik1.i_K1 + ito.i_to + ikr.i_Kr + iks.i_Ks + ipk.i_p_K + stimulus.i_stim - 2 * inak.i_NaK) / (cell.Vol_c * phys.F) * cell.Cm
    in [mM]

#
# Sodium concentration
#
[sodium]
dot(Na_i) = -(ina.i_Na + inab.i_b_Na + 3 * inak.i_NaK + 3 * inaca.i_NaCa) * cell.Cm / (cell.Vol_c * phys.F)
    in [mM]

#
# Reversal potentials
#
[rev]
E_Ca = 0.5 * phys.R * phys.T / phys.F * log(ion.Ca_o / calcium.Ca_i)
    in [mV]
E_K = phys.R * phys.T / phys.F * log(ion.K_o / potassium.K_i)
    in [mV]
E_Ks = phys.R * phys.T / phys.F * log((ion.K_o + P_kna * ion.Na_o) / (potassium.K_i + P_kna * sodium.Na_i))
    in [mV]
E_Na = phys.R * phys.T / phys.F * log(ion.Na_o / sodium.Na_i)
    in [mV]
P_kna = 0.03

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    3.0      1000.0   0

[[script]]
import matplotlib.pyplot as pl
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Get the time variable and the first state variable's name
tvar = m.time().qname()
svar = m.states().next().qname()

# Display the results
pl.figure()
pl.plot(d[tvar], d[svar])
pl.title(svar + ' against ' + tvar)
pl.show()

